--When would you want to use a remote repository rather than keeping all your work
local?

When I want to make it public and make it easier for others to make changes.

--Why might you want to always pull changes manually rather than having Git
automatically stay up-to-date with your remote repository?

--The remote repository might have a partial commit that might now work
completely by it's own. And if your local repository keeps changing
automatically, that might cause you some confusion when you are working
on your own local changes.

--Describe the differences between forks, clones, and branches. When would you
use one instead of another?
Forks are available only between repositories hosted on GitHub. It
makes copy of someone's repository on the GitHub.

Clones are created from any git repository, to another repository
which may be on any machine, or even on the new spot on the same local
filesystem as the original repository was. Commits can be pulled
or pushed among repositories as far as the permission allows.

Branches are created inside of one single git repository and all
the user of the repository can know what branches are there.

--What is the benefit of having a copy of the last known state of the remote
stored locally?
Enables you to keep the state of the remote repository at your
hand while you work on your branch locally, and also makes it
easier for you to merge your own commits to the remote by merging
it locally before you push to the remote and allows for offline work.

--How would you collaborate without using Git or GitHub? What would be easier,
and what would be harder?
Without Git, you could,you could send the file in an email or put it on an online cloud service. the problem with this though it would 
be somewhat harder if there happen to be conflicsts with someone else's modification.
Using  GitHub might be easier if you know how to use it but if you don't then it might have some challenges.


--When would you want to make changes in a separate branch rather than directly in
master? What benefits does each approach have?
Working in a separate branch ensures that your master branch is
always kept in a working state. You can use a serparate branch for experimenting with your file without worrying.